a.city.time_zone
me.update paid_until: '17.12.2020'
me.update paid_until: nil
a.update paid_until: '18.12.2020.in_time_zone('Kyiv')'
a.update paid_until: "18.12.2020.in_time_zone('Kyiv')"
a.paid_until
a.paid_until.in_time_zone('Kyiv')
Time.parce(a.paid_until)
Time.parse(a.paid_until)
Time.parse(a.paid_until.to_time)
a.paid_until.to_time
a.paid_until.to_time.in_time_zone('Kyiv')
a.update paid_until: "17.12.2020"
a.update paid_until: "17.1.2021"
me
exit
me
me = Doctor.find_by(email: 'consilium1@yandex.ru')
me
alex = Doctor.find_by(email: 'nick4vk@yandex.ru')
ale
alex
alex.update paid_until: '19.12.2020'
alex.update paid_until: '19.1.2021'
exit
alex = Doctor.find_by(email: 'nick4vk@yandex.ru')
alex.update paid_until: nil
alex.update paid_until: '19.01.2021'
exit
alex = Doctor.find_by(email: 'nick4vk@yandex.ru')
alex.update paid_until: nil
alex.update paid_until: '19.01.2021'
exit
alex = Doctor.find_by(email: 'nick4vk@yandex.ru')
alex.update paid_until: '16.01.2020'
my_date_time = Time.now + 4.days
distance_of_time_in_words(from_time, from_time - 45.seconds, include_seconds: true)
from_time = Time.now-10.minutes
distance_of_time_in_words(from_time, from_time - 45.seconds, include_seconds: true)
 paid_until = DateTime.current-1.days
  (paid_until - DateTime.current)/1.second
t =  (paid_until - DateTime.current)/1.second
t.class
t > 0
t =  (paid_until - DateTime.current)
t
t =  (paid_until.to_i - DateTime.current.to_i)
t
t.class
t =  (paid_until.to_i - DateTime.current.to_i)/1.second
t
t.class
paid_until.class
paid_until.to_seconds
paid_until.to_seconds
paid_until.to_sec
alex
alex.update paid_until: 17.12.2020 23:00
alex.update paid_until: '17.12.2020 23:00'
alex
alex.update paid_until: '17.12.2020 23:00, +2'
alex
alex.paid_until.in_time_zone(alex.city.time_zone)
alex.update paid_until: '17.12.2020 22:30'
alex.update paid_until: '18.12.2020 00:30'
alex.update paid_until: '19.12.2020 00:30'
(paid_until.to_i
     - DateTime.current.to_i)/1.second
paid_until.to_i
paid_until
alex.paid_until
me
Doctor.last
me = Doctor.find_by(email: 'consilium1@yandex.ru')
me
Doctor.first
Doctor.all.each( |d| p d.paid_until)
Doctor.all.each{ |d| p d.paid_until}
paid_until
alex.save
paid_until
exit
paid_until
paid_until
reload!
alex
Doctor.find_by(email: 'nick4vk@yandex.ru')
alex = Doctor.find_by(email: 'nick4vk@yandex.ru')
alex.update paid_until: '16.12.2020 00:30'
alex.update paid_until: '20.12.2020 00:30'
alex.update paid_until: '17.12.2020 00:30'
alex.update paid_until: '21.12.2020 00:30'
alex.update paid_until: '16.12.2020 00:30'
alex
exit
alex = Doctor.find_by(email: 'nick4vk@yandex.ru')
alex.update paid_until: '22.12.2020 00:30'
alex.update paid_until: '17.12.2020 00:30'
alex.update paid_until: '22.12.2020 00:30'
alex.update paid_until: '17.12.2020 00:30'
alex.update paid_until: '22.01.2021 00:30'
alex.update paid_until: '22.01.2021 00:30'exit
exit
arr = (0..500).to_a
arr
Doctor.last
alex = Doctor.find_by(email: "nick4vk@yandex.ru")
alex
alex.update paid_until: "22.12.2000"
alex
alex.update paid_until: "22.01.2021"
alex.update paid_until: "22.01.2000"
alex.update paid_until: "22.01.2021"
exit
Trunk.find_by(serial_number: 6)
exit
doctor.last
Doctor.last
Doctor.fist
Doctor.first
Doctor.second
Doctor.find_by(email: 'consilium1@yandex.ru')
Doctor.find_by(email: 'nick1@yandex.ru')
Doctor.find_by(email: 'nick4vk@yandex.ru')
alex = Doctor.find_by(email: 'nick4vk@yandex.ru')
alex.paid_until
alex.paid_until.class
alex.paid_until.class = DateTime.now
alex.paid_until = DateTime.now
alex.paid_until
DateTime.current+1.days
alex.paid_until = DateTime.current+1.days
alex.paid_until
alex
reload!
Doctor.last
Doctor.last.destroy
Doctor.last
Doctor.last
Doctor.last
Doctor.last.destroy
reload!
Doctor.last
exit
Trunk.last
Branch.last
exit
Meridian.find_by(alias_ru: 'Почки')
лшв = Meridian.find_by(alias_ru: 'Почки')
kid = Meridian.find_by(alias_ru: 'Почки')
kid
kid.points
kid.points.6
kid6 = kid.points.find_by(name: 'R.6')
kud6
kid.6
kid6
kid6.update alias_cn: '照海'
kid6
kid6 = kid.points.find_by(name: 'R.5')
kid6 = kid.points.find_by(name: 'R.6')
kid6
kid5 = kid.points.find_by(name: 'R.5')
kid5
kid.points.each{ |point| p point.name '*'}
kid.points.each{ |point| p point.name}
Point.last
Point.create ( name: 'R.5', alias_ru: 'Шуй-цюань', alias_cn: '水泉', meridian_id: 4, serial_number: 5, function: 'Xi' ) 
2-2
2-2
Point.create ( name: 'R.5', alias_ru: 'Шуй-цюань', alias_cn: '水泉', meridian_id: '4', serial_number: '5', function: 'Xi' ) 
Point.create ( name: 'R.5', alias_ru: 'Шуй-цюань', alias_cn: '水泉') 
Point.create(name: 'R.5', alias_ru: 'Шуй-цюань', alias_cn: '水泉') 
Point.create(name: 'R.5', alias_ru: 'Шуй-цюань', alias_cn: '水泉', meridian_id: 4, serial_number: 5, function: 'Xi' ) 
kid.points.each{ |point| p point.name}
Point.find_by(name: 'R.5')
akid5 = Point.find_by(name: 'R.5')
akid5
akid5.meridian_id
reload!
kid.points.each{ |point| p point.name}
akid5.save
kid.points.each{ |point| p point.name}
Point.find_by(name: 'R.10')
Point.find_by(name: 'R.10').meridian_id
akid5 = Point.find_by(name: 'R.5')
akid5
kid
kid = Meridian.find_by(alias_ru: 'Почки')
kid
kid.points.map( |point| p point.name)
kid.points.map{ |point| p point.name}
kid.points.map{ |point| p point.name}.sort
kid.points.map{ |point| p point.name}.sort.reverse
kid.points.map{ |point| p point.name.sort}
kid.points.map{ |point| p point.sort.name}
exit
Trunc.last
Trunk.last
exit
