a = Patients.find(id=38)
a = Patient.find(id=38)
a
a.visits
a.visits[1]
a.visits[1][5]
a.visits[1][4]
a.visits[1].treatment
a.visits.treatment
a.visits.all.treatment
a.visits.all.treatmentы
a.visits.all.treatments
a
a.treatment
a.visits.each{|t| puts t.treatment}
reload!
a = Patient.find(id=43)
a.visits.all.treatments
a.visits.treatment
a.visits.treatments
a.visits.treatments.last
a.visits.treatment.last
a.visits.all
a.visits.treatment.first
a.visits.treatment[1]
a = Patient.find(id=38)
a.visits.treatment[1]
a.visits.each{|t| puts t.treatment}
a.treatment
a.visits[1].treatment
a.visits.count
a.visits[7].treatment.destroy
a.visits[7].treatment
a.visits[6].treatment
a.visits[6].treatment.destroy
a.visits[6].treatment.delete
a.visits[6]
a.visits[6].destroy
a.visits.count
a.visits[5].destroy
a.visits[4].destroy
a.visits.count
a.visits.all
a.visits.all.visited_at
a.visits.each{|v| v.visited_at}
a.visits.each{|v| p v.visited_at}
a.visits.each{|v| puts v.visited_at}
a = Patient.find(id=43)
a.visits.each{|v| puts v.visited_at}
a.visits.count
a.visits[4].destroy
a.visits.count
a.visits.each{|v| puts v.treatment}
a.save
a.visits.count
a = Patient.find(id=38)
a.visits[7].destroy
a.visits[6].destroy
a.visits[6]
a.visits[5]
a.visits[4]
a.visits[3]
a.visits.
a.visits.each{|v| puts v.treatment}
a.save
a.visits.each{|v| puts v.treatment}
a = Patient.find(id=43)
a.visits.each{|v| puts v.treatment}
a.visits[4].destroy
a.visits.each{|v| puts v.treatment}
a.visits[4]
a.visits[4].destory
a.visits[4].destroy
a = 
a.visits.each{|v| puts v.treatment}
reload!
a = Patient.find(id=43)
a.visits.each{|v| puts v.treatment}
a.visits.last.destroy
a.save
a.visits.each{|v| puts v.treatment}
reload!
a = Patient.find(id=43)
a.visits.each{|v| puts v.treatment}
reload!
a.visits.each{|v| puts v.treatment}
a = Patient.find(id=43)
a.visits.each{|v| puts v.treatment}
a.visits[(4..6)].destroy
a.visits[(4,5,6)].destroy
a.visits[(4,5,6)].to_a.flatten.each.destroy
a.visits[(4..6)].to_a.flatten.each.destroy
a.visits[4]destroy
a.visits[4].destroy
a.visits[5].destroy
a.visits[6].destroy
a.save
a
a.visits.each{|v| puts v.treatment}
reload!
a = Patient.find(id=43)
a.visits.each{|v| puts v.treatment}\
a.visits.each{|v| puts v.treatment}
reload!
a = Patient.find(id=43)
a
a.visits.each{|v| puts v.treatment}
a.visits[6].destroy
a.visits[5].destroy
a.visits[4].destroy
reload!
a.visits.each{|v| puts v.treatment}
a.visits[5].destroy
a = Patient.find(id=43)
a.visits[5].destroy
a.visits[4].destroy
a.visits.each{|v| puts v.treatment}
DateTime.now
DateTime.now[0]
DateTime.now[year]
DateTime.now[:year]
DateTime.now[year:]
DateTime.now.year
учше
exit
DateTime.now
DateTime.now.hour
def eot
  pi = (Math::PI) # pi
  delta = (DateTime.now.getutc.yday - 1) # (Текущий день года - 1)
  yy = Time.now.getutc.year
  np = case yy #The number np is the number of days from 1 January to the date of the Earth's perihelion. (http://www.astropixels.com/ephemeris/perap2001.html)
        when 1921, 1929, 1937, 1945, 1970, 1978, 1989, 1997 ; 0
        when 1923, 1924, 1926, 1932, 1934, 1935, 1940, 1942, 1943, 1946, 1948, 1951, 1953, 1954,
                   1956, 1959, 1961, 1962, 1964, 1965, 1967, 1973, 1975, 1981, 1983, 1986, 1994, 2002,
                   2005, 2008, 2013, 2016, 2021, 2029, 2043  ; 1
        when 1920, 1922, 1925, 1927, 1930, 1931, 1933, 1938, 1939, 1941, 1949, 1950, 1957, 1958,
                   1966, 1969, 1972, 1977, 1980, 1984, 1985, 1988, 1991, 1992, 1999, 2000, 2007, 2010,
                   2011, 2018, 2019, 2024, 2026, 2027, 2030, 2032, 2035, 2037, 2038, 2040, 2041, 2045,
                   2046, 2048, 2049  ; 2
        when 1928, 1936, 1944, 1947, 1952, 1955, 1960, 1963, 1968, 1971, 1974, 1976, 1979, 1982,
                   1987, 1990, 1993, 1995, 1996, 1998, 2001, 2003, 2004, 2006, 2009, 2014, 2015, 2017,
                   2022, 2023, 2025, 2031, 2033, 2034, 2042, 2050 ; 3
        when 2012, 2020, 2028, 2036, 2039, 2044, 2047 ; 4
        else ; 2
        end
  a = DateTime.now.getutc.to_a; delta = delta + a[2].to_f / 24 + a[1].to_f / 60 / 24 # Поправка на дробную часть дня
  lambda = 23.4406 * pi / 180; # Earth's inclination in radians
  omega = 2 * pi / 365.2564 # angular velocity of annual revolution (radians/day)
  alpha = omega * ((delta + 10) % 365) # angle in (mean) circular orbit, solar year starts 21. Dec
  beta = alpha + 0.03340560188317 * Math.sin(omega * ((delta - np) % 365)) # angle in elliptical orbit, from perigee  (radians)
  gamma = (alpha - Math.atan(Math.tan(beta) / Math.cos(lambda))) / pi # angular correction
  eot = (43200 * (gamma - gamma.round)) # equation of time in seconds
end
eot
def eot
  pi = (Math::PI) # pi
  delta = (DateTime.now.getutc.yday - 1) # (Текущий день года - 1)
  yy = DateTime.now.getutc.year
  np = case yy #The number np is the number of days from 1 January to the date of the Earth's perihelion. (http://www.astropixels.com/ephemeris/perap2001.html)
        when 1921, 1929, 1937, 1945, 1970, 1978, 1989, 1997 ; 0
        when 1923, 1924, 1926, 1932, 1934, 1935, 1940, 1942, 1943, 1946, 1948, 1951, 1953, 1954,
                   1956, 1959, 1961, 1962, 1964, 1965, 1967, 1973, 1975, 1981, 1983, 1986, 1994, 2002,
                   2005, 2008, 2013, 2016, 2021, 2029, 2043  ; 1
        when 1920, 1922, 1925, 1927, 1930, 1931, 1933, 1938, 1939, 1941, 1949, 1950, 1957, 1958,
                   1966, 1969, 1972, 1977, 1980, 1984, 1985, 1988, 1991, 1992, 1999, 2000, 2007, 2010,
                   2011, 2018, 2019, 2024, 2026, 2027, 2030, 2032, 2035, 2037, 2038, 2040, 2041, 2045,
                   2046, 2048, 2049  ; 2
        when 1928, 1936, 1944, 1947, 1952, 1955, 1960, 1963, 1968, 1971, 1974, 1976, 1979, 1982,
                   1987, 1990, 1993, 1995, 1996, 1998, 2001, 2003, 2004, 2006, 2009, 2014, 2015, 2017,
                   2022, 2023, 2025, 2031, 2033, 2034, 2042, 2050 ; 3
        when 2012, 2020, 2028, 2036, 2039, 2044, 2047 ; 4
        else ; 2
        end
  a = DateTime.now.getutc.to_a; delta = delta + a[2].to_f / 24 + a[1].to_f / 60 / 24 # Поправка на дробную часть дня
  lambda = 23.4406 * pi / 180; # Earth's inclination in radians
  omega = 2 * pi / 365.2564 # angular velocity of annual revolution (radians/day)
  alpha = omega * ((delta + 10) % 365) # angle in (mean) circular orbit, solar year starts 21. Dec
  beta = alpha + 0.03340560188317 * Math.sin(omega * ((delta - np) % 365)) # angle in elliptical orbit, from perigee  (radians)
  gamma = (alpha - Math.atan(Math.tan(beta) / Math.cos(lambda))) / pi # angular correction
  eot = (43200 * (gamma - gamma.round)) # equation of time in seconds
end
eot
CITIES = [
  {city: 'Magnitogorsk', lng: 59.6},
  {city: 'Moscow', lng: 37.64},
  {city: 'Novosibirsk', lng: 82.9}
]
user_city = CITIES[0]
user_date = DateTime.current
def sun_time(city, date)
  DateTime.current + (city[:lng]*4).minutes + eot.seconds
end
sun_time(user_city, user_date)
Time.now
@doctor_current_date
DateTime.now
DateTime.current
DateTime.now.getutc
exit
