LunarPalace.new(year: 2020, month:1 , day:1 )
ctiveRecord::Base.connection.instance_of? 
ActiveRecord::Base.connection.instance_of? 
ActiveRecord::Base.connection
ActiveRecord::Base.connection.instance_of?
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "mysql"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "psql"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "PostgresQL"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "Postgresql"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "Postgres"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "postgresQL"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "postgresql"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "postgres"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "pg"
adapter_type = connection.adapter_name.downcase.to_sym
case adapter_type
when :mysql
  # do the MySQL part
when :sqlite
  # do the SQLite3 part
when :postgresql
  # etc.
else
  raise NotImplementedError, "Unknown adapter type '#{adapter_type}'"
end
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "PostgreSQL"
ActiveRecord::ConnectionAdapters::AbstractAdapter::Version
adapter_name()
ActiveRecord::Base.connection.adapter_name 
ActiveRecord::Base.connection.adapter_name == 'MySQL'
ActiveRecord::Base.connection.adapter_name == 'MySQL2'
ActiveRecord::Base.connection.adapter_name == 'Mysql2'
ActiveRecord::Base.connection
ActiveRecord::Base.connection.adapter_name
exit
exit
Patient.last
Visit.last
exit
Point.last
Visit.last
exit
RAILS_ENV = test bin / rake webpacker: clobber
exit
ActiveRecord::Base.connection.adapter_name
exit
ActiveRecord::Base.connection.adapter_name
exit
Patient.last
Visit.last
Visit.last.patient
exit
Visit.last
exit
ActiveRecord::Base.table_name
Rails.configuration
 Rails.configuration.database_configuration[Rails.env]
exit
exit
ActiveRecord::Base.connection.adapter_name
heroku pg:info
heroku pg:push mylocaldb HEROKU_POSTGRESQL_MAGENTA --app sushi
exit
config = ActiveRecord::Base.configurations[Rails.env] || Rails.application.config.database_configuration[Rails.env]
puts config
exit
Doctor.last
City.last
ActiveRecord::Base.connection.adapter_name
exit
config = ActiveRecord::Base.configurations[Rails.env] || Rails.application.config.database_configuration[Rails.env]
puts config
exit
config = ActiveRecord::Base.configurations[Rails.env] || Rails.application.config.database_configuration[Rails.env]
puts config
exit
City.first
exit
City.first
City.all
City.first
exit
config   = Rails.configuration.database_configuration
config
database = config[Rails.env]["database"]

database.
database.size
config.database.size
exit
City.all
exit
City.last
exit
City.last
exit
City.first
exit
2015%28
exit
учше
exit
City.last
config = ActiveRecord::Base.configurations[Rails.env] || Rails.application.config.database_configuration[Rails.env]
puts config
exit
Point.find_by name: 'V.62'
Point.find_by name: 'R.6'
Meridian.find_by name: 'Почки'
Meridian.find_by alias_ru: 'Почки'
Point.create(name: 'R.6', alias_ru: 'Чжао-хай', meridian_id: 4)
Point.find_by name: 'R.6'
Point.find_by name: 'TR.5'
Point.find_by name: 'Tr.5'
Meridian.find_by alias_ru: 'Тройной Обогреватель'
Meridian.find_by alias_ru: 'Почки'
Point.create(name: 'Tr.5', alias_ru: 'Вай-гуань', meridian_id: 11)
reload!
Point.find_by name: 'Tr.5'
Point.find_by name: 'GB.41'
Point.find_by name: 'Gи.41'
Point.find_by name: 'Gb.41'
Meridian.find_by alias_ru: 'Желчный Пузырь'
Point.create(name: 'Vb.41', alias_ru: 'Цзу-линь-ци', meridian_id: 12)
a = Point.find_by(name: 'Vb.41')
a.update(own_element: 'Wood')
a.save
a
a = Point.find_by(name: 'Rp.4')
Meridian.find_by alias_ru: 'Селезенка'
Point.create(name: 'Rp.4', alias_ru: 'Гунь-сунь', meridian_id: 6)
a = Point.find_by(name: 'Rp.4')
a.update serial_number: 4
a = Point.find_by(name: 'Vb.41')
a
a.update serial_number: 41
a
a = Point.find_by(name: 'Rp.4')
Point.create(name: 'Rp.4', alias_ru: 'Гунь-сунь', meridian_id: 6, serial_number: 4)
a = Point.find_by(name: 'Tr.5')
b = Point.find_by(name: 'Tr.5')
reload!
b
a
a=nil
a
b
c
b.update serial_number: 5
b.update function: 'Lo'
b
leque = Point.find_by(name: 'P.7')
leque
leque.update function: 'Lo'
wai = Point.find_by(name: 'Tr.5')
wai
zu = Point.find_by(name: 'Vb.41')
zu
zu.update finction: 'Lo'
zu.update function: 'Lo'
zhao = Point.find_by(name: 'R.6')
zhao
zhao.update(serial_number: 6, function: 'Lo')
zhao
shen = Point.find_by(name: 'V.62')
shen
shen.update function: 'Lo'
hou = Point.find_by(name: 'Ig.3')
hou
hou.update function: 'Lo'
hou
nei = Point.find_by(name: 'Mc.6')
nei
nei.update function: 'Lo'
nei
lie = Point.find_by(name: 'P.7')
lie
reload!
exit
City.find_by(name: 'Белая Церковь')
Doctor.create(name: 'Сан',email: 'nick4vk@yandex.ru', city_id: 10)
reload!
doctor.last
Doctor.last
exit
Meridian.find_by(alias_ru: "Желудок")
учше
exit
Point.find_all.where(alias_ru: "Гунь-сунь")
Point.find_each.where(alias_ru: "Гунь-сунь")
Point.find_each(alias_ru: "Гунь-сунь")
Point.find_by(alias_ru: "Гунь-сунь")
Point.where(alias_ru: "Гунь-сунь")
a = Point(92)
a = Point.find(92)
a
a.dextroy
a.destroy
Point.where(alias_ru: "Гунь-сунь")
exit
