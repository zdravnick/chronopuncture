  when 1927, 1949, 1972, 1994, 2039 then 10
  when 1928, 1950, 1995, 2017, 2040 then 11
  when 1951, 1973, 1996, 2018 then 12
  when 1929, 1952, 1974, 2019, 2041 then 13
  when 1930, 1975, 1997, 2020, 2042 then 14
  when 1931, 1953, 1976, 1998, 2043 then 15
  when 1932, 1954, 1999, 2021, 204 then 16
  when 1955, 1977, 2000, 2022 then 17
  when 1933, 1956, 1978, 2023, 2045 then 18
  when 1934, 1979, 2001, 2024, 2046 then 19
  when 1935, 1957, 1980, 2002, 2047 then 20
  when 1936, 1958, 2003, 2025, 2048 then 21
  when 1959, 1981, 2004, 2026 then 22
  when 1937, 1960, 1982, 2027, 2049 then 23
  when 1938, 1983, 2005, 2028, 2050 then 24
  when 1939, 1961, 1984, 2006, 2051 then 25
  when 1940, 1962, 2007, 2029, 2052 then 26
  when 1963, 1985, 2008, 2030 then 27
  when 1941, 1964, 1986, 2031, 2053 then 28
    else 0
  end
end
# число-эквивалент месяца
#
def lunar_palaces_month_num(month)
  case month
    when 1 then 27
    when 2 then 2
    when 3 then 2
    when 4 then 5
    when 5 then 7
    when 6 then 10
    when 7 then 12
    when 8 then 15
    when 9 then 18
    when 10 then 20
    when 11 then 23
    when 12 then 25
  end
end
# коррекция +1 для високосного года
#
 def lunar_palaces_leap_correction(year)
    if  year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)
      leap_correction = 1
    else
      leap_correction = 0
    end
  end
def lunar_palace(equ_day, equ_month, equ_year, correction)
  sum = equ_day + equ_month + equ_year + correction
  if sum > 28
    lunar_palace = sum%28
  elsif sum == 0
    lunar_palace = 28
  else
    lunar_palace
  end
end
# выбираем сектор с точками
#
def lunar_palace_opposite(lunar_palace)
  if lunar_palace.between?(15, 28)
    lunar_palace_opposite = lunar_palace - 14
  elsif lunar_palace.between?(1, 14)
    lunar_palace_opposite = lunar_palace + 14
  else
  end
end
# выводим точки по секторам, мужские и женские
#
def points_of_lunar_palaces(lunar_palace_opposite)
   result = []
  case lunar_palace_opposite
    when 1
      result << { men: [ Point.find_by(name: 'F.1')], woman: [Point.find_by(name: 'Vb.41')] }
    when 2
      result << { men: [ Point.find_by(name: 'F.4') ], woman: [ Point.find_by(name: 'Vb.44') ]  }
    when 3
      result << { men: [ Point.find_by(name: 'F.3') ], woman: [ Point.find_by(name: 'Vb.34') ]  }
    when 4
      result << { men: [ Point.find_by(name: 'F.3'), Point.find_by(name: 'Vb.37') ],
       woman: [ Point.find_by(name: 'Vb.37'), Point.find_by(name: 'F.3') ]  }
    when 5
      result << { men: [ Point.find_by(name: 'F.5'), Point.find_by(name: 'Vb.40') ],
       woman: [ Point.find_by(name: 'F.5'), Point.find_by(name: 'Vb.40') ]  }
    when 6
      result << { men: [ Point.find_by(name: 'F.2') ], woman: [ Point.find_by(name: 'Vb.38') ]  }
    when 7
      result << { men: [ Point.find_by(name: 'F.8') ], woman: [ Point.find_by(name: 'Vb.43') ]  }
    when 8
      result << { men: [ Point.find_by(name: 'R.1') ], woman: [ Point.find_by(name: 'V.65') ]  }
    when 9
      result << { men: [ Point.find_by(name: 'R.7') ], woman: [ Point.find_by(name: 'V.67') ]  }
    when 10
      result << { men: [ Point.find_by(name: 'R.3') ], woman: [ Point.find_by(name: 'V.40') ]  }
    when 11
      result << { men: [ Point.find_by(name: 'R.3'), Point.find_by(name: 'V.58') ],
        woman: [ Point.find_by(name: 'R.3'), Point.find_by(name: 'V.58') ]  }
    when 12
      result << { men: [ Point.find_by(name: 'R.4'), Point.find_by(name: 'V.64') ],
        woman: [ Point.find_by(name: 'R.4'), Point.find_by(name: 'V.64') ]  }
    when 13
      result << { men: [ Point.find_by(name: 'R.2') ], woman: [ Point.find_by(name: 'V.60') ]  }
    when 14
      result << { men: [ Point.find_by(name: 'R.10') ], woman: [ Point.find_by(name: 'V.66') ]  }
    when 15
      result << { men: [ Point.find_by(name: 'P.11') ], woman: [ Point.find_by(name: 'Gi.3') ]  }
    when 16
      result << { men: [ Point.find_by(name: 'P.8') ], woman: [ Point.find_by(name: 'Gi.1') ]  }
    when 17
      result << { men: [ Point.find_by(name: 'P.9') ], woman: [ Point.find_by(name: 'Gi.11') ]  }
    when 18
      result << { men: [ Point.find_by(name: 'Gi.6'), Point.find_by(name: 'P.9') ],
        woman: [ Point.find_by(name: 'Gi.6'), Point.find_by(name: 'Gi.11') ]  }
    when 19
      result << { men: [ Point.find_by(name: 'Gi.4'), Point.find_by(name: 'P.7') ],
        woman: [ Point.find_by(name: 'P.7'), Point.find_by(name: 'Gi.4') ]  }
    when 20
      result << { men: [ Point.find_by(name: 'P.10') ], woman: [ Point.find_by(name: 'Gi.5') ]  }
    when 21
      result << { men: [ Point.find_by(name: 'P.5') ], woman: [ Point.find_by(name: 'Gi.2') ]  }
    when 22
      result << { men: [ Point.find_by(name: 'C.9'), Point.find_by(name: 'Mc.9') ],
        woman: [ Point.find_by(name: 'Ig.3') ]  }
    when 23
      result << { men: [ Point.find_by(name: 'C.4'), Point.find_by(name: 'Mc.5') ],
        woman: [ Point.find_by(name: 'Ig.1') ]  }
    when 24
      result << { men: [ Point.find_by(name: 'C.7'), Point.find_by(name: 'Mc.7') ],
        woman: [ Point.find_by(name: 'Ig.8') ]  }
    when 25
      result << { men: [ Point.find_by(name: 'Ig.7'), Point.find_by(name: 'C.7'),
        Point.find_by(name: 'Mc.7') ],
        woman: [ Point.find_by(name: 'Ig.7'), Point.find_by(name: 'C.7'),
        Point.find_by(name: 'Mc.7') ]  }
    when 26
      result << { men: [ Point.find_by(name: 'Ig.4'), Point.find_by(name: 'C.5'),
        Point.find_by(name: 'Mc.6') ],
        woman: [ Point.find_by(name: 'C.5'), Point.find_by(name: 'Ig.4') ]  }
    when 27
      result << { men: [ Point.find_by(name: 'C.8'), Point.find_by(name: 'Mc.8') ],
        woman: [ Point.find_by(name: 'Ig.5') ]  }
    when 28
      result << { men: [ Point.find_by(name: 'C.3'), Point.find_by(name: 'Mc.3') ],
        woman: [ Point.find_by(name: 'Ig.2') ]  }
  end
  return result
end
points_of_lunar_palaces(lunar_palace_opposite)[0][:men].each{ |e| puts  "#{e.name}"}
points_of_lunar_palaces(lunar_palace_opposite)[0][:woman].each{ |e| puts "#{e.name}"}
exit
LunarPalaces
LunarPalace
exit
LunarPalace.new(year: , month: , day: )
LunarPalace.new(year: 2020, month:1 , day:1 )
ctiveRecord::Base.connection.instance_of? 
ActiveRecord::Base.connection.instance_of? 
ActiveRecord::Base.connection
ActiveRecord::Base.connection.instance_of?
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "mysql"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "psql"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "PostgresQL"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "Postgresql"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "Postgres"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "postgresQL"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "postgresql"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "postgres"
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "pg"
adapter_type = connection.adapter_name.downcase.to_sym
case adapter_type
when :mysql
  # do the MySQL part
when :sqlite
  # do the SQLite3 part
when :postgresql
  # etc.
else
  raise NotImplementedError, "Unknown adapter type '#{adapter_type}'"
end
ActiveRecord::Base.connection.instance_values["config"][:adapter] == "PostgreSQL"
ActiveRecord::ConnectionAdapters::AbstractAdapter::Version
adapter_name()
ActiveRecord::Base.connection.adapter_name 
ActiveRecord::Base.connection.adapter_name == 'MySQL'
ActiveRecord::Base.connection.adapter_name == 'MySQL2'
ActiveRecord::Base.connection.adapter_name == 'Mysql2'
ActiveRecord::Base.connection
ActiveRecord::Base.connection.adapter_name
exit
exit
Patient.last
Visit.last
exit
Point.last
Visit.last
exit
RAILS_ENV = test bin / rake webpacker: clobber
exit
