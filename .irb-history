  (param = add_1) + '1, '
end
method_1(add_1)
method_1
method_1(2)
add_1 = 'num: '
def method_1(param)
  param + '1, '
end
def method_2
  '2, '
end
def method_3(add_1)
  puts method_1(add_1) + method_2 + '3'
end
method_3(add_1)
def method_3(add_1)
  puts method_1(add_1) + add_1 +  method_2 + '3'
end
method_3(add_1)
def method_3(add_1)
  puts add_1 + method_1 + add_1 +  method_2 + '3'
end
method_3(add_1)
exit
add_1 = 'num: '
def method_1
  '1'
end
def method_2
  '2, '
end
def method_3(add_1)
  puts add_1 + method_1 + add_1 +  method_2 + '3'
end
method_3(add_1)
add_1 = 'num: '
def method_1
  '1, '
end
def method_2
  '2, '
end
def method_3(add_1)
  puts add_1 + method_1 + add_1 +  method_2 + '3'
end
method_3(add_1)
method_!
method_`
method_1
method_1
method_3
method_3(add_1)
end
def method_3(add_1)
  add_1 + method_1 + add_1 +  method_2 + '3'
end
method_3(add_1)
exit
add_1 = 'num: '
def method_1
  '1, '
end
def method_2
  '2, '
end
def method_3(add_1)
  [method_1, method_2, '3'].map do |elem|
    add_1 + elem
  end
end
method_3(add_1)
exit
add_1 = 'num: '
add_2 = '-'
def method_1(add_2)
  add_2 + '1, '
end
def method_2
  '2, '
end
def method_3(add_1, add_2)
  [method_1(add_2), method_2, '3'].map do |elem|
    add_1 + elem
  end
end
method_3(add_1)
method_3(add_1, add_2)
exit
add_1 = 'num: '
add_2 = '-'
def method_1(param = 0)
  param + '1, '
end
def method_2(param = 0)
  param + '2, '
end
def method_3(add_1, add_2)
  [method_1(add_2), method_2(add_2), '3'].map do |elem|
    add_1 + elem
  end
end
method_3(add_1)
method_3(add_1, add_2)
method_3(add_1, nil)
method_3(add_1, 0)
method_3(add_1, '0')
method_3(add_1, 0.to_i)
method_3(add_1, (0.to_i))
method_3(add_1, '0')
method_3(add_1, add_2)
exit
add_1 = 'num: '
add_2 = '-'
def method_1(param || '')
  param + '1, '
end
def method_2(param = 0)
  param + '2, '
end
def method_3(add_1, add_2)
  [method_1(add_2), method_2(add_2), '3'].map do |elem|
    add_1 + elem
  end
end
method_3(add_1)
2-2
exit
exit
add_1 = 'num: '
add_2 = '-'
def method_1(param ||= '')
  param + '1, '
end
def method_2(param = 0)
  param + '2, '
end
def method_3(add_1, add_2)
  [method_1(add_2), method_2(add_2), '3'].map do |elem|
    add_1 + elem
  end
end
method_3(add_1)
cadd_1 = 'num: '
add_2 = '-'
def method_1(param ||= '')
  param + '1, '
end
def method_2(param = 0)
  param + '2, '
end
def method_3(add_1, add_2)
  [method_1(add_2), method_2(add_2), '3'].map do |elem|
    add_1 + elem
  end
end
method_3(add_1, add_2)
cccexit
exit
add_1 = 'num: '
add_2 = '-'
def method_1(*param)
  param + '1, '
end
def method_2(*param)
  param + '2, '
end
def method_3(add_1, add_2)
  [method_1(add_2), method_2(add_2), '3'].map do |elem|
    add_1 + elem
  end
end
method_3(add_1, add_2)
add_1 = 'num: '
add_2 = '-'
def method_1(param)
  param + '1, '
end
def method_2(param)
  param + '2, '
end
def method_3(add_1, add_2)
  [method_1(add_2), method_2(add_2), '3'].map do |elem|
    add_1 + elem
  end
end
method_3(add_1, add_2)
method_3(add_1, '8')
method_3(add_1, nil)
('a', 'b').concat
('a', 'b').concate
('a', 'b').concatenate
exit
учше
"йцукенгшщзхъфывапролджэячсмитьбю".chars
"йцукенгшщзхъфывапролджэячсмитьбю".chars.sort
exit
exit
Meridian.last
учше
