moment_of_birth(@patient_birthdate, patient_city)
# стража на момент рождения пацика.
def guard(time, city)
  case moment_of_birth(time, city)
  when 19...21 then 11
  when 21...23 then 12
  when 23, 0 then 1
  when  1...3 then 2
  when  3...5 then 3
  when  5...7 then 4
  when  7...9 then 5
  when  9...11 then 6
  when 11...13 then 7
  when 13...15 then 8
  when 15...17 then 9
  when 17...19 then 10
  end
end
# получаем Номер Стражи Пациента:
guard_patient = guard(@patient_birthdate, patient_city)
guard_doctor = guard(@doctor_current_date, doctor_city)
def ranges
[
  { value: 12, dates: DateTime.new(1974, 1, 1)..DateTime.new(1974, 1, 22) }, # it's 1973 !!!
  { value: 1, dates: DateTime.new(1974, 1, 23)..DateTime.new(1974, 2, 21) },# 1974
  { value: 2, dates: DateTime.new(1974, 2, 22)..DateTime.new(1974, 3, 23) },
  { value: 3, dates: DateTime.new(1974, 3, 24)..DateTime.new(1974, 4, 21) },
  { value: 4, dates: DateTime.new(1974, 4, 22)..DateTime.new(1974, 5, 21) },
  { value: 4, dates: DateTime.new(1974, 5, 22)..DateTime.new(1974, 6, 19) }, # same 4th!
  { value: 5, dates: DateTime.new(1974, 6, 20)..DateTime.new(1974, 7, 18) },
  { value: 6, dates: DateTime.new(1974, 7, 19)..DateTime.new(1974, 8, 17) },
  { value: 7, dates: DateTime.new(1974, 8, 18)..DateTime.new(1974, 9, 15) },
  { value: 8, dates: DateTime.new(1974, 9, 16)..DateTime.new(1974, 10, 14) },
  { value: 9, dates: DateTime.new(1974, 10, 15)..DateTime.new(1974, 11, 13) },
  { value: 10, dates: DateTime.new(1974, 11, 14)..DateTime.new(1974, 12, 13) },
  { value: 11, dates: DateTime.new(1974, 12, 14)..DateTime.new(1974, 12, 31) },
  { value: 11, dates: DateTime.new(1975, 1, 1)..DateTime.new(1975, 1, 11) }, # 1975
  { value: 12, dates: DateTime.new(1975, 1, 12)..DateTime.new(1975, 2, 10) },
  { value: 1, dates: DateTime.new(1975, 2, 11)..DateTime.new(1975, 3, 12) },
  { value: 2, dates: DateTime.new(1975, 3, 13)..DateTime.new(1975, 4, 11) },
  { value: 3, dates: DateTime.new(1975, 4, 12)..DateTime.new(1975, 5, 10) },
  { value: 4, dates: DateTime.new(1975, 5, 11)..DateTime.new(1975, 6, 9) },
  { value: 5, dates: DateTime.new(1975, 6, 10)..DateTime.new(1975, 7, 8) },
  { value: 6, dates: DateTime.new(1975, 7, 9)..DateTime.new(1975, 8, 6) },
  { value: 7, dates: DateTime.new(1975, 8, 7)..DateTime.new(1975, 9, 5) },
  { value: 8, dates: DateTime.new(1975, 9, 6)..DateTime.new(1975, 10, 4) },
  { value: 9, dates: DateTime.new(1975, 10, 5)..DateTime.new(1975, 11, 2) },
  { value: 10, dates: DateTime.new(1975, 11, 3)..DateTime.new(1975, 12, 2) },
  { value: 11, dates: DateTime.new(1975, 12, 3)..DateTime.new(1975, 12, 31) },
  { value: 12, dates: DateTime.new(1976, 1, 1)..DateTime.new(1976, 1, 30) }, # 1976
  { value: 1, dates: DateTime.new(1976, 1, 31)..DateTime.new(1976, 2, 29) },
  { value: 2, dates: DateTime.new(1976, 3, 1)..DateTime.new(1976, 3, 30) },
  { value: 3, dates: DateTime.new(1976, 3, 31)..DateTime.new(1976, 4, 28) },
  { value: 4, dates: DateTime.new(1976, 4, 29)..DateTime.new(1976, 5, 28) },
  { value: 5, dates: DateTime.new(1976, 5, 29)..DateTime.new(1976, 6, 26) },
  { value: 6, dates: DateTime.new(1976, 6, 27)..DateTime.new(1976, 7, 26) },
  { value: 7, dates: DateTime.new(1976, 7, 27)..DateTime.new(1976, 8, 24) },
  { value: 8, dates: DateTime.new(1976, 8, 25)..DateTime.new(1976, 9, 23) },
  { value: 8, dates: DateTime.new(1976, 9, 24)..DateTime.new(1976, 10, 22) }, # the same 8th !
  { value: 9, dates: DateTime.new(1976, 10, 23)..DateTime.new(1976, 11, 20) },
  { value: 10, dates: DateTime.new(1976, 11, 21)..DateTime.new(1976, 12, 20) },
  { value: 11, dates: DateTime.new(1976, 12, 21)..DateTime.new(1976, 12, 31) },
  { value: 11, dates: DateTime.new(1977, 1, 1)..DateTime.new(1977, 1, 18) }, # 1977
  { value: 12, dates: DateTime.new(1977, 1, 19)..DateTime.new(1977, 2, 17) },
  { value: 1, dates: DateTime.new(1977, 2, 18)..DateTime.new(1977, 3, 19) },
  { value: 2, dates: DateTime.new(1977, 3, 20)..DateTime.new(1977, 4, 17) },
  { value: 3, dates: DateTime.new(1977, 4, 18)..DateTime.new(1977, 5, 17) },
  { value: 4, dates: DateTime.new(1977, 5, 18)..DateTime.new(1977, 6, 16) },
  { value: 5, dates: DateTime.new(1977, 6, 17)..DateTime.new(1977, 7, 15) },
  { value: 6, dates: DateTime.new(1977, 7, 16)..DateTime.new(1977, 8, 14) },
  { value: 7, dates: DateTime.new(1977, 8, 15)..DateTime.new(1977, 9, 12) },
  { value: 8, dates: DateTime.new(1977, 9, 13)..DateTime.new(1977, 10, 12) },
  { value: 9, dates: DateTime.new(1977, 10, 13)..DateTime.new(1977, 11, 10) },
  { value: 10, dates: DateTime.new(1977, 11, 11)..DateTime.new(1977, 12, 10) },
  { value: 11, dates: DateTime.new(1977, 12, 11)..DateTime.new(1977, 12, 31) },
  { value: 11, dates: DateTime.new(1978, 1, 1)..DateTime.new(1978, 1, 8) }, # 1978
  { value: 12, dates: DateTime.new(1978, 1, 9)..DateTime.new(1978, 2, 6) },
  { value: 1, dates: DateTime.new(1978, 2, 7)..DateTime.new(1978, 3, 8) },
  { value: 2, dates: DateTime.new(1978, 3, 9)..DateTime.new(1978, 4, 6) },
  { value: 3, dates: DateTime.new(1978, 4, 7)..DateTime.new(1978, 5, 6) },
  { value: 4, dates: DateTime.new(1978, 5, 7)..DateTime.new(1978, 6, 5) },
  { value: 5, dates: DateTime.new(1978, 6, 6)..DateTime.new(1978, 7, 4) },
  { value: 6, dates: DateTime.new(1978, 7, 5)..DateTime.new(1978, 8, 3) },
  { value: 7, dates: DateTime.new(1978, 8, 4)..DateTime.new(1978, 9, 2) },
  { value: 8, dates: DateTime.new(1978, 9, 3)..DateTime.new(1978, 10, 1) },
  { value: 9, dates: DateTime.new(1978, 10, 2)..DateTime.new(1978, 10, 31) },
  { value: 10, dates: DateTime.new(1978, 11, 1)..DateTime.new(1978, 11, 29) },
  { value: 11, dates: DateTime.new(1978, 11, 30)..DateTime.new(1978, 12, 29) },
  { value: 12, dates: DateTime.new(1978, 12, 30)..DateTime.new(1978, 12, 31) },
]
end
def patient_month_calculation # month's number from Hongcong observatotie's table
   ranges.find do |range|
    range[:dates].include?(@patient_birthdate.to_date)
  end
end
# получаем Число Месяца Пациента:
 month_patient_lo_shu = patient_month_calculation[:value]
 day_patient_lo_shu = patient_birthdate_day_number(number_of_day)
p "EOT = " + eot.to_s
p "EOT пацика = " + eot_patient(@patient_birthdate).to_s
p "Номер года: " + year_num_patient.to_s
p "Номер МЕСЯЦА: " + month_patient_lo_shu.to_s
p "НОМЕР ДНЯ: " + day_patient_lo_shu.to_s
p "НОМЕР 12-час СТРАЖИ пацика: " + guard_patient.to_s
p "НОМЕР 12-час СТРАЖИ доктора: " + guard_doctor.to_s
def first_point_lo_shu_number(year, month, day_p, day_d )
  s = (year + month + day_p + day_d)%64
  if s == 0
    s = 64
  else
    s
  end
end
first_point_lo_shu = first_point_lo_shu_number(year_num_patient, month_patient_lo_shu,
 day_patient_lo_shu, guard_doctor)
p "Номер ячейки 1-ой точки: "  + first_point_lo_shu.to_s
p hour = sun_time( doctor_city, @doctor_current_date).hour
p min = sun_time( doctor_city, @doctor_current_date).min
#  получасие активного на момент ПРИЕМА ПАЦИЕНТА канала
def half_hour_for_reception_time(a, b)
  case a
  when (0..23)
    if (0..29).include?(b)
      return half_hour_guard = a*2 + 1
    end
      if (30..59).include?(b)
      return half_hour_guard = a*2 + 2
    else
      'Incorrect time'
    end
    else
    'Incorrect time'
  end
end
# получасие активного на момент приема пацика Канала
p half_hour_visit = half_hour_for_reception_time(hour, min)
# таблица активного канала на  МОМЕНТ ПРИЕМА пациента
def meridian_for_lo_shu_square(h)
  case h
    when 1, 13, 25, 37 then 7 # BLADDER, V
    when 2, 14, 26, 38 then 8 # KIDNEYS, R
    when 3, 15, 27, 39 then 9  # MC
    when 4, 16, 28, 40 then 10 # TR
    when 5, 17, 29, 41 then 11  # VB
    when 6, 18, 30, 42 then 12 # F
    when 7, 19, 31, 43 then 1 # P
    when 8, 20, 32, 44 then 2 # Gi
    when 9, 21, 33, 45 then 3 # E
    when 10, 22, 34, 46 then 4 # Rp
    when 11, 23, 35, 47 then 5   # C
    when 12, 24, 36, 48 then 6 # Ig small int
    end
end
# выбор Таблицы Меридиана для заполнения квадрата Ло Шу
p meridian_lo_shu = meridian_for_lo_shu_square(half_hour_visit)
def points_matrix_lo_shu
  gall_bladder =
  [
    { values: 21..24, points: 'VB.44(21) + MC.8(44), F.4(22) + TR.10(43),
      VB.43(23-bad) + MC.7(42-bad), F.3(24) + TR.6(41)' },
    { values: 41..44, points: 'MC.8(44) + VB.44(21), TR.10(43) + F.4(22),
      MC.7(42-bad) + VB.43(23-bad), TR.6(41) + F.3(24)' }, # mirror 21..24
    { values: 33..36, points: 'VB.41(33) + TR.3(32) ,P.11(34-bad) + MC.9(31-bad)
      VB.40(35) + TR.4(30), F.8 + R.10' },
    { values: 29..32, points: 'R.10(29) + F.8(36), TR.4(30) + VB.40(35),
      MC.9(31-bad) + P.11(34-bad), TR.3(32) + VB.41(33)' }, #mirror 33..36
    { values: 45..48, points: 'P.10(45) + R.3(20), VB.34(46) + TR.2(19),
      P.9(47) + R.7(18), VB.38(48) + TR.1(17)' },
    { values: 17..20, points: 'TR.1(17) + VB.38(48), R.7(18) + P.9(47),
      TR.2(19) + VB.34(46), R.3(20) + P.10(45)' }, # mirror 45..48
    { values: 25..28, points: 'P.8(25) + VC.5(40), F.2(26) + R.2(39),
      P.5(27) + MC.3(38), F.1(28) + R.1(37)' },
    { values: 37..40, points: 'R.1(37) + F.1(28), MC.3(38) + P.5(27),
      R.2(39) + F.2(26), MC.5(40) + P.8(25)' }, # mirror 25..28
    { values: 57..60, points: 'RP.9(57) + RP.3(8),  Ig.8(58) + E.44(7),
    C.7(59) + RP.5(6), Ig.5(60) + E.45(5) ' },
    { values: 5..8, points: 'E.45(5) + Ig.5(60), RP.5(6) + C.7(59),
      E.44(7) + Ig.8(58), RP.3(8) + RP.9(57)' }, # mirror 57..60
    { values: 13..16, points: 'C.4(13) + Gi.5(52), V.66(14) + RP.2(51),
      C.3(15) + Gi.11(50), V.67(16) + RP.1(49)' },
    { values: 49..52, points: 'RP.1(49) + V.67(16), Gi.11(50) + C.3(15),
      RP.2(51) + V.66(14), Gi.5(52) + C.4(13) ' }, # mirror 13..16
    { values: 1..4, points: 'V.65(1) + E.41(64), Ig.2(2) + Gi.4(63),
      V.64(3) + E.36(62), Ig.1(4) + Gi.3(61)' },
    { values: 61..64, points: 'Gi.3(61) + Ig.1(4), E.36(62) + V.64(3),
      Gi.4(63) + Ig.2(2), E.41(64) + V.65(1) ' }, # mirror 1..4
    { values: 53..56, points: 'V.60(53) + Gi.1(12), Ig.4-bad(54) + E.42-bad(11),
      V.40(55) + Gi.2(10), Ig.3(56) + E.43(9)' },
    { values: 9..12, points: 'E.43(9) + Ig.3(56), Gi.2(10) + V.40(55),
     E.42-bad(11) + Ig.4-bad(54), Gi.1(12) + V.60(53)' }, # mirror 53..56
  ]
end
def lo_shu_points(first_point_lo_shu)
  points_matrix_lo_shu.find do |point|
    point[:values].include?(first_point_lo_shu)
  end
end
p 'NOW ARE OPEN: ' + lo_shu_points(first_point_lo_shu=41)[:points].to_s
exit
