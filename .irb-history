#  получасие активного на момент ПРИЕМА ПАЦИЕНТА канала
def half_hour_for_reception_time(a, b)
  case a
  when (0..23)
    if (0..29).include?(b)
      return half_hour_guard = a*2 + 1
    end
      if (30..59).include?(b)
      return half_hour_guard = a*2 + 2
    else
      'Incorrect time'
    end
    else
    'Incorrect time'
  end
end
# получасие активного на момент приема пацика Канала
p half_hour_visit = half_hour_for_reception_time(hour, min)
# таблица активного канала на  МОМЕНТ ПРИЕМА пациента
def meridian_for_lo_shu_square(h)
  case h
    when 1, 13, 25, 37 then 7 # BLADDER, V
    when 2, 14, 26, 38 then 8 # KIDNEYS, R
    when 3, 15, 27, 39 then 9  # MC
    when 4, 16, 28, 40 then 10 # TR
    when 5, 17, 29, 41 then 11  # VB
    when 6, 18, 30, 42 then 12 # F
    when 7, 19, 31, 43 then 1 # P
    when 8, 20, 32, 44 then 2 # Gi
    when 9, 21, 33, 45 then 3 # E
    when 10, 22, 34, 46 then 4 # Rp
    when 11, 23, 35, 47 then 5   # C
    when 12, 24, 36, 48 then 6 # Ig small int
    end
end
# выбор Таблицы Меридиана для заполнения квадрата Ло Шу
p meridian_lo_shu = meridian_for_lo_shu_square(half_hour_visit)
def points_matrix_lo_shu(meridian_lo_shu)
  case meridian_lo_shu
  when 11 # изменить, должно быть 11
  gall_bladder =
  [
    { values: 21..24, points: 'VB.44(21) + MC.8(44), F.4(22) + TR.10(43),
      VB.43(23-bad) + MC.7(42-bad), F.3(24) + TR.6(41)' },
    { values: 41..44, points: 'MC.8(44) + VB.44(21), TR.10(43) + F.4(22),
      MC.7(42-bad) + VB.43(23-bad), TR.6(41) + F.3(24)' }, # mirror 21..24
    { values: 33..36, points: 'VB.41(33) + TR.3(32) ,P.11(34-bad) + MC.9(31-bad)
      VB.40(35) + TR.4(30), F.8 + R.10' },
    { values: 29..32, points: 'R.10(29) + F.8(36), TR.4(30) + VB.40(35),
      MC.9(31-bad) + P.11(34-bad), TR.3(32) + VB.41(33)' }, #mirror 33..36
    { values: 45..48, points: 'P.10(45) + R.3(20), VB.34(46) + TR.2(19),
      P.9(47) + R.7(18), VB.38(48) + TR.1(17)' },
    { values: 17..20, points: 'TR.1(17) + VB.38(48), R.7(18) + P.9(47),
      TR.2(19) + VB.34(46), R.3(20) + P.10(45)' }, # mirror 45..48
    { values: 25..28, points: 'P.8(25) + VC.5(40), F.2(26) + R.2(39),
      P.5(27) + MC.3(38), F.1(28) + R.1(37)' },
    { values: 37..40, points: 'R.1(37) + F.1(28), MC.3(38) + P.5(27),
      R.2(39) + F.2(26), MC.5(40) + P.8(25)' }, # mirror 25..28
    { values: 57..60, points: 'RP.9(57) + RP.3(8),  Ig.8(58) + E.44(7),
    C.7(59) + RP.5(6), Ig.5(60) + E.45(5) ' },
    { values: 5..8, points: 'E.45(5) + Ig.5(60), RP.5(6) + C.7(59),
      E.44(7) + Ig.8(58), RP.3(8) + RP.9(57)' }, # mirror 57..60
    { values: 13..16, points: 'C.4(13) + Gi.5(52), V.66(14) + RP.2(51),
      C.3(15) + Gi.11(50), V.67(16) + RP.1(49)' },
    { values: 49..52, points: 'RP.1(49) + V.67(16), Gi.11(50) + C.3(15),
      RP.2(51) + V.66(14), Gi.5(52) + C.4(13) ' }, # mirror 13..16
    { values: 1..4, points: 'V.65(1) + E.41(64), Ig.2(2) + Gi.4(63),
      V.64(3) + E.36(62), Ig.1(4) + Gi.3(61)' },
    { values: 61..64, points: 'Gi.3(61) + Ig.1(4), E.36(62) + V.64(3),
      Gi.4(63) + Ig.2(2), E.41(64) + V.65(1) ' }, # mirror 1..4
    { values: 53..56, points: 'V.60(53) + Gi.1(12), Ig.4-bad(54) + E.42-bad(11),
      V.40(55) + Gi.2(10), Ig.3(56) + E.43(9)' },
    { values: 9..12, points: 'E.43(9) + Ig.3(56), Gi.2(10) + V.40(55),
     E.42-bad(11) + Ig.4-bad(54), Gi.1(12) + V.60(53)' }, # mirror 53..56
  ]
when 2
  liver =
  [
    { values: 21..24, points: 'F.1(21) + TR.3(44), P.5(22) + Vb.34(43),
      F.2(23-bad) + TR.4(42-bad), P.8(24) + VB.38(41)' },
    { values: 41..44, points: 'VB.38(41) + P.8(24), TR.4-bad(42) + F.2-bad(23),
      Vb.34(43) + P.5(22), TR.3(44) + F.1(21)' }, # mirror 21..24
    { values: 33..36, points: 'F.3(33) + Vb.41(32) ,Gi.2(34-bad) + TR.2(31-bad)
      F.4(35) + Vb.40(30), Gi.1(36) + TR.1(29)' },
    { values: 29..32, points: 'TR.1(29) + Gi.1(36), Vb.40(30) + F.4(35),
      TR.2-bad(31) + Gi.2-bad(34), Vb.41(32) + F.3(33)' }, #mirror 33..36
    { values: 45..48, points: 'Gi.3(45) + MC.5(20), P.11(46) + VB.43(19),
      Gi.4(47) + MC.3(18), F.8(48) + VB.44(17)' },
    { values: 17..20, points: 'VB.44(17) + F.8(48), MC.3(18) + Gi.4(47),
      VB.43(19) + P.11(46), MC.5(20) + Gi.3(45)' }, # mirror 45..48
    { values: 25..28, points: 'Gi.5(25) + TR.5(40), P.9(26) + MC.7(39),
      Gi.11(27) + TR.10(38), P.10(28) + MC.8(37)' },
    { values: 37..40, points: 'MC.8(37) + P.10(28), TR.10(38) + Gi.11(27),
      MC.7(39) + P.9(26), TR.5(40) + Gi.5(25)' }, # mirror 25..28
    { values: 57..60, points: 'Ig.3(57) + C.4(8), V.40(58) + Rp.2(7),
      Ig.4(59) + C.3(6), V.60(60) + Rp.1(5) ' },
    { values: 5..8, points: 'Rp.1(5) + V.60(60), C.3(6) + Ig.4(59),
      Rp.2(7) + V.40(58), C.4(8) + Ig.3(57)' }, # mirror 57..60
    { values: 13..16, points: 'Ig.5(13) + E.41(52), Rp.2(14) + C.7(51),
      Ig.8(15) + E.36(50), R.1(16) + C.8(49)' },
    { values: 49..52, points: 'C.8(49) + R.1(16), E.36(50) + Ig.8(15),
      C.7(51) + Rp.2(14), E.41(52) + Ig.5(13) ' }, # mirror 13..16
    { values: 1..4, points: 'R.3(1) + Rp.9(64), V.66(2) + E.42(63),
      R.7(3) + C.9(62), V.67(4) + E.43(61)' },
    { values: 61..64, points: 'E.43(61) + V.67(4), C.9(62) + R.7(3),
      E.42(63) + V.66(2), Rp.9(64) + R.3(1) ' }, # mirror 1..4
    { values: 53..56, points: 'R.10(53) + E.45(12), V.64-bad(54) + Rp.5-bad(11),
      MC.9(55) + E.44(10), V.65(56) + Rp.3(9)' },
    { values: 9..12, points: 'Rp.3(9) + V.65(56), E.44(10) + MC.9(55),
     Rp.5-bad(11) + V.64-bad(54), E.45(12) + R.10(53)' }, # mirror 53..56
  ]
  end
end
matrix = points_matrix_lo_shu(meridian_lo_shu)
matrix
def lo_shu_points(matrix, first_point_lo_shu)
  matrix.find do |point|
    point[:values].include?(first_point_lo_shu)
  end
end
lo_shu_points(matrix, first_point_lo_shu)
p 'NOW ARE OPEN: ' + lo_shu_points(matrix, first_point_lo_shu)[:points].to_s
first_point_lo_shu
reload!
City.all
a = City.new
a
a.name = "Moscow"
a.lng = 37.64
a.save
a.save
a.name = "Moscow"
a.lng = 37.64
a.save
reload
reload!
a = City.new
a.name = "Moscow"
a
a.lng = 37.64
a.save
a
reload!
a = City.new
a.name = "Moscow"
a.lng = 37.64
a.save
a.save.errors
a.save.errors?
a
exit
City.all
a = City.new
a
exit
a = City.new
a.name = "Magnitogorsk"
a
a.lng = 59.6
a.save
a
exit
a = City.new
a.name = 'Magnitogorsk'
a.lng = 59.6
a.save
a.errors
reload!
a.sasve
a.save
a.errors
current_doctor
exit
Patient.last
a = Patient.last
exit
Doctor.last
exit
Doctor.last
a = City.new
a.doctor
Patient.last
a = Patient.last.city
a
a.name = 'Magnitogorsk'
reload
exit
Patient.last
a = City.new
a.name = 'Magnitogorsk'
a.lng = 59.6
a.save
a.errors
exit
a = City.new
a.name = 'Magnitogorsk'
a.lng = 59.6
a.save
a.errors
exit
