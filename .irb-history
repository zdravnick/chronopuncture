  gamma = (alpha - Math.atan(Math.tan(beta) / Math.cos(lambda))) / pi # angular correction
  eot = (43200 * (gamma - gamma.round)) # equation of time in seconds
end
eot_patient(patient_birth_time)
user_date = Date.current
CITIES = [
  {city: 'Magnitogorsk', lng: 59.6},
  {city: 'Moscow', lng: 37.64},
  {city: 'Novosibirsk', lng: 82.9}
]
patient_city = CITIES[0]
user_city = CITIES[0]
def sun_time(city, date)
  Time.current + (city[:lng]*4).minutes + eot_user
end
sun_time(user_city, user_date)
# НОМЕР ГОДА по циклу-60
def year_number_60th_calculation(birth)
    y = birth.year % 60 - 3
    if y < 1
      y + 60
    elsif y > 60
      y - 60
      else y
    end
end
year_num = year_number_60th_calculation(patient_birth_time)
# момент рождения пацика (по Солнцу)
def moment_of_birth(time, city)
  return (time + (city[:lng]*4).minutes + eot_patient(time)).hour
end
moment_of_birth(patient_birth_time, patient_city)
# стража на момент рождения пацика.
def guard_of_birth(time, city)
  case moment_of_birth(time, city)
  when 19...21 then 11
  when 21...23 then 12
  when 23, 0 then 1
  when  1...3 then 2
  when  3...5 then 3
  when  5...7 then 4
  when  7...9 then 5
  when  9...11 then 6
  when 11...13 then 7
  when 13...15 then 8
  when 15...17 then 9
  when 17...19 then 10
  end
end
guard = guard_of_birth(patient_birth_time, patient_city)
def lunar_year_number(city, date) # лунный год
  n = date.year - 1823
  if n > 19
    n = n%19
  else
    n
  end
end
lunar_year_number(patient_city, patient_birth_time)
def lunar_year_of_patient(base_of_years, birth_date) # ЛУННЫЙ(!)год и месяц по базе base_of_years
  if base_of_years.include?(birth_date)
    return base_of_years[birth_date]
  else
    p 'ups!'
  end
end
lunar_year_of_patient(base_of_years, patient_birth_date)
year_num = year_number_60th_calculation(patient_birth_time)
2-2
year_num = year_number_60th_calculation(patient_birth_time)
year_num = year_number_60th_calculation(patient_birth_time)
year_num
probe = []
probe\
probe
probe = []
probe
probe = [ 1: 'a', 2: 'b']
probe
probe.class
2-2
1-1
probe = [ 1: 'a', 2: 'b']
probe
probe = [ 1 => 'a', 2 => 'b']
probe
probe = (1..64, nil).to_h
probe = ((1..64) => nil).to_h
h = {}
(1..10).each {|x| h[x] = "{x}"}
h
h = {}
h = {}
(1..64).each {|x| h[x] = "a#{x}"}
h
h = {}
(1..64).each {|x| h[x] = "nil#{x}"}
h =
2-2
h
h = {}
(1..64).each {|x| h[x] = "nil#{x}"}
h
(1..64).each {|x| h[x] = "#{x}"}
h
probe
probe = {}
probe = {"1" => "a", "2" => "b"   }
probe
probe.1
probe
probe[1]
probe.1.value
probe[1].value
probe["1"].value
probe["1"].ley
probe["1"].key
probe["1"].keys
probe = { 1 => "a", 2 => "b"   }
probe[1].value
probe[1].key
probe[1]
probe[2]
probe = { [1, 'a"], [2,  "b"]   }
probe
probe = { [1, "a"], [2,  "b"]   }
probe = { [1, "a"], [2,  "b"]   }2-2
probe = { [1, "a"], [2,  "b"]   }
probe = { [1, "a"], [2,  "b"]   }
probe = { [1 => "a"], [2 =>  "b"]   }
probe = [ {1 => "a"}, {2 =>  "b"}   ]
probe
probe.1.value
probe[1].value
probe[1].values
probe = [ {"22" => "a"}, {"2" =>  "b"}   ]
probe[1].values
probe["22"].values
probe =  {"22" => "a"}, "2" =>  "b"}   
probe =  {"22" => "a", "2" =>  "b"}   
probe
probe[1].values
probe["22"].values
exit
h = { "a" => 100, "b" => 200 }
h[a]
h["a"]
h['a']
h[1]
h(1)
h = { "22" => 100, "2" => 200 }
h[1]
h[22]
h['22']
h = { 22 => 100, 2 => 200 }
h[22]
h['22']
h = { 22 => 'He-gu', 2 => 'Zu-lin -qi' }
h['22']
h[22]
h[2]
reload!
gall_bladder = {
  1=>'VB.44',   2=>'VB.43', 3=>'VB.41',  4=>'VB.40',     5=>'Vb.38(bad)', 6=>'VB.34',  7=>'F.1',   8=>'F.2',
  9=>'F.3',     10=>'F.4',  11=>'F.8',   12=>'P.11 bad', 13=>'P.10',      14=>'P.9',   15=>'P.8',  16=>'P.5',
  17=>'Gi.1',   18=>'Gi.2', 19=>'Gi.3',  20=>'Gi.4',     21=>'Gi.5',      22=>'Gi.11', 23=>'E.45', 24=>'E.44',
  25=>'E.43',   26=>'E.42', 27=>'E.41',  28=>'E.36',     29=>'Rp.1',      30=>'Rp.2',  31=>'Rp.3', 32=>'Rp.5',
  33=>'Rp.9',   34=>'C.7',  35=>'C.4',   36=>'C.3',      37=>'Ig.1',      38=>'Ig.2',  39=>'Ig.3', 40=>'Ig.4',
  41=>'Ig.5',   42=>'Ig.8', 43=>'V.67',  44=>'V.66',     45=>'V.65',      46=>'V.64',  47=>'V.60', 48=>'V.40',
  49=>'R.1',    50=>'R.2',  51=>'R.3',   52=>'R.7',      53=>'R.10',      54=>'MC.9',  55=>'MC.8', 56=>'MC.7',
  57=>'MC.5',   58=>'MC.3', 59=>'TR.1',  60=>'TR.2',     61=>'TR.3',      62=>'TR.4',  63=>'TR.6', 64=>'TR.10'
}
gall_bladder
gall_bladder[1]
gall_bladder[57]
exit
2-2
Time.now
exit
exit
a = DateTime.current
a = [DateTime.current.year, DateTime.month]
a = [DateTime.current.year, DateTime.dya]
a = [DateTime.current.year, DateTime.day]
a = {DateTime.current.year, DateTime.day}
Date.civil = [DateTime.current.year, DateTime.day]
Date.civil = [DateTime.current.year, DateTime.hour]
Date.civil = [DateTime.current.year.to_i]
Date.civil = [DateTime.current.year]
DateTime.civil = [DateTime.current.year]
DateTime.civil = (DateTime.current.year)
DateTime.current.year
DateTime.civil = (DateTime.current.year, DateTime.current.month, DateTime.current.day, DateTime.current.hour)
DateTime.civil_from_format :local, 2012, 12, 17
DateTime.civil_from_format :local, DateTime.current.year, 12, 17
DateTime.civil_from_format :local, DateTime.current.year, DateTime.current.month, 17
DateTime.civil_from_format :local, DateTime.current.year, DateTime.current.month, DateTime.current.day. 0, 0
DateTime.civil_from_format :local, DateTime.current.year, DateTime.current.month, DateTime.current.day, 0, 0
DateTime.civil_from_format :local, DateTime.current.year, DateTime.current.month, DateTime.current.day, 12, 0
exit
